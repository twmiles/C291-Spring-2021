//tracy miles
//03/26/21

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>

#define SUITS 4
#define FACES 13
#define CARDS 52
#define HAND 5

//start protos
void shuffle(unsigned int wDeck[][FACES]);
void deal(unsigned int wDeck[][FACES], char *wFace[], char *wSuit[]); 
bool highCard(char *wFace[]);
bool pairs();
bool threeOfKind(); 
bool straight(char *wFace[]);
bool fullHouse(); 
bool fourOfKind();
bool royalFlush();



struct card {
  char *face;  
  char *suit;
};

typedef struct card Card;

//global
Cards hand[HAND]; //card array

int main(void)
{
  //initialize array
  unsigned int deck[SUITS][FACES] = { 0 };
  srand(time(NULL));
  shuffle(deck);

  //initialize array                       
   char *suit[SUITS] =            
     {"Hearts", "Diamonds", "Clubs", "Spades"};
   
   //initialize array                   
   char *face[FACES] =
     {"Ace", "Deuce", "Three", "Four",         
      "Five", "Six", "Seven", "Eight",         
      "Nine", "Ten", "Jack", "Queen", "King"};
   
   //deal cards
   deal(deck, face, suit);
   
   //print
   printf("1 is true, 0 is false\n");
   printf("Pairs: %d\n", pairs());
   printf("Three of Kind: %d\n", threeOfKind());
   printf("Straight: %d\n", straight(face));
   printf("Full House: %d\n", fullHouse());
   printf("Four of Kind: %d\n", fourOfKind());
   printf("Royal Flush: %d\n", royalFlush());
   printf("High Card: %d\n", highCard(face));
} 

//shuffle cards
void shuffle(unsigned int wDeck[][FACES])
{
  for (size_t card = 1; card <= CARDS; ++card) {
    size_t row;
    size_t column;

    do {                                                        
      row = rand() % SUITS;                                   
      column = rand() % FACES;                             
    } while(wDeck[row][column] != 0);
    wDeck[row][column] = card;
  } 
}

//deal cards
void deal(unsigned int wDeck[][FACES], char *wFace[], char *wSuit[]){
  size_t card;
  for (card = 0; card < HAND; ++card) {
    int random_suit = rand() % 4;
    int random_face = rand() % 13;
    Card temp = {wFace[random_face], wSuit[random_suit]};
    hand[card] = temp;
    printf("%5s of %-8s%c", temp.face, temp.suit, card % 2 == 0 ? '\n' : '\t');
  }
}

int cardIndex(char* val, char *wFrace[]){
  int i;
  for(i = 0; i < FACES; i++){
    if(strcmp(val, wFrace[i]) == 0){
      return i;
    }
  }
  return -1;
}

bool highCard(char *wFace[]){
   if(!pairs() && !straight(wFace) && !fullHouse() && !royalFlush() && !threeOfKind() && !fourOfKind()){
    int i;
    for(i = 0; i < HAND; i++){
      if(strcmp(hand[i].face, "Nine") == 0 || strcmp(hand[i].face, "Seven") == 0 || strcmp(hand[i].face, "Ace") == 0 || strcmp(hand[i].face, "King") == 0 || strcmp(hand[i].face, "Queen") == 0){
	return true;
      }
    }
  }
  return false;
   
} 

bool pairs(){
  int i,j;
  for(i = 0; i < HAND; i++){
    int count = 0;
    for(j = 0; j < HAND; j++){
      if(i != j){
	if(strcmp(hand[i].face, hand[j].face) == 0){
	  count = count + 1;
	}
      }
    }
    if(count == 1){
      return true;
    }
  }
  return false;
} 

bool threeOfKind(){
  int i, j;
  for(i = 0; i < HAND; i++){
    int count = 0;
    for(j = 0; j < HAND; j++){
      if(i != j){
	if(strcmp(hand[i].face, hand[j].face) == 0){
	  count += 1;
	}
      }
    }
    if(count == 2){
      return true;
    }
  }
  return false;
}

bool straight(char *wFace[]){
  Card compare = hand[0];
  double average = cardIndex(compare.face, wFace);
  int i;
  for(i = 1; i < HAND; i++){
    double temp = cardIndex(hand[i].face, wFace);
    if(fabs(average - temp) > 3){
      return false;
    } else {
      if(strcmp(hand[i].face, "Ace") == 0 && average > 8){
	average = (average + FACES) / 2;
      } 
      else {
	average = (average + temp) / 2;
      }
    }
  }
  return true;
}

bool fullHouse(){
  bool three = threeOfKind();
  bool two = pairs();
  return three && two;
}

bool royalFlush(){
  Card compare = hand[0];
  if(strcmp(compare.face, "Ace") != 0 && strcmp(compare.face, "King") != 0 && strcmp(compare.face, "Queen") != 0 && strcmp(compare.face, "Jack") != 0 && strcmp(compare.face, "Ten") != 0){
    return false;
  }
  int i;
  for(i = 1; i < HAND; i++){
    if(strcmp(hand[i].suit, compare.suit) == 0){
      if(strcmp(hand[i].face, "Ace") != 0 && strcmp(hand[i].face, "King") != 0 && strcmp(hand[i].face, "Queen") != 0 && strcmp(hand[i].face, "Jack") != 0 && strcmp(hand[i].face, "Ten") != 0){
	return false;
      }
    } else {
      return false;
    }
  }
  return true;
}

bool fourOfKind(){
  int i, j;
  for(i = 0; i < HAND; i++){
    int count = 0;
    for(j = 0; j < HAND; j++){
      if(i != j){
	if(hand[i].face == hand[j].face){
	  count += 1;
	}
      }
    }
    if(count == 3){
      return true;
    }
  }
  return false;
}
